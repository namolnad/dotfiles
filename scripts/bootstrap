#!/usr/bin/env bash

export DOTFILES=$HOME/Developer/dotfiles

# UTILS

default_color=$(tput sgr 0)
red="$(tput setaf 1)"
yellow="$(tput setaf 3)"
green="$(tput setaf 2)"
blue="$(tput setaf 4)"

info() {
    printf "%s==> %s%s\n" "$blue" "$1" "$default_color"
}

success() {
    printf "%s==> %s%s\n" "$green" "$1" "$default_color"
}

error() {
    printf "%s==> %s%s\n" "$red" "$1" "$default_color"
}

warning() {
    printf "%s==> %s%s\n" "$yellow" "$1" "$default_color"
}

prompt_sudo() {
    sudo -v

    # Keep-alive: update existing `sudo` timestamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &
}

# PREREQUISITES

install_xcode() {
    info "Installing Apple's CLI tools (prerequisites for Git and Homebrew)..."
    if xcode-select -p >/dev/null; then
        warning "Xcode is already installed"
    else
        xcode-select --install
        sudo xcodebuild -license accept
    fi
}

install_homebrew() {
    info "Installing Homebrew..."
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"
    if hash brew &>/dev/null; then
        warning "Homebrew already installed"
    else
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if [ -f /opt/homebrew/bin/brew ]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
    fi
}

setup_ssh() {
    if [[ ! $(ls -A "$HOME/.ssh") ]]; then
        git_user=$(git config --get user.email)
        if [ -z "$git_user" ]; then read -r -p 'Enter your git email: ' git_user; fi
        ssh-keygen -t ed25519 -C "$git_user" -f "$HOME/.ssh/id_ed25519" -N ''
        eval "$(ssh-agent -s)"
        echo """Host *
  AddKeysToAgent yes
  IdentityFile ~/.ssh/id_ed25519""" > "$HOME/.ssh/config"
        pbcopy < "$HOME/.ssh/id_ed25519.pub"
        open -a Safari https://github.com/settings/keys
        info 'Your ssh public key has been copied to the keyboard. Confirm when you have entered the key in GitHub (y)'
        while : ; do
            read -n 1 k <&1
            if [[ $k = 'y' ]] ; then
                success "\nContinuing setup\n"
                break
            else
                warning "Confirm when you have entered the key in GitHub"
            fi
        done
    fi
}

setup_ruby_environment() {
    info 'Installing rbenv'
    if hash rbenv &>/dev/null; then
        warning 'rbenv already installed'
    else
        brew install rbenv
        warning "Homebrew called. Must reprompt for sudo."
        prompt_sudo
    fi

    info 'Installing global ruby'
    rbenv install -s $(cat $DOTFILES/stow/config/.rbenv/version)
    eval "$(rbenv init -)"
    info 'Installing bundler'
    gem install bundler
    rbenv rehash
}

clone_dotfiles() {
    info "Cloning dotfiles into $DOTFILES"
    mkdir -p $DOTFILES
    cd $DOTFILES
    if [ $(git rev-parse --is-inside-work-tree) ]; then
        warning "Dotfiles already cloned"
        cd -
        return
    fi
    git init
    git remote add origin git@github.com:namolnad/dotfiles.git
    git fetch origin
    git checkout -b main --track origin/main
    cd -
}

# PRIMARY

install_applications() {
    info 'Installing gems'
    bundle install
    info 'Symlinking dotfiles'
    mkdir -p $HOME/Library/Workflows/Applications/Folder\ Actions
    # We _could_ ensure $HOME/.config exists vs symlinking the entire directory, but this ensures all configs are in one place
    stow -d stow -R --ignore "\.DS_Store" config -t $HOME
    info 'Symlinking scripts'
    sudo stow -d stow -R --ignore "\.DS_Store" opt -t /usr/local/opt
    info 'Installing Oh My Zsh'
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    info 'Installing zsh plugins'
    git clone https://github.com/mroth/evalcache ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/evalcache
    git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions
    git clone https://github.com/Aloxaf/fzf-tab ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab
    if [ ! -d "/Applications/PJs.app" ]; then
        info 'Installing PJs'
        tmp_dir=$(mktemp -d)
        curl -fsSL -o $tmp_dir/PJs.zip https://github.com/acrookston/pjs/releases/download/v1.0.0/PJs.zip $tmp_dir
        unzip $tmp_dir/PJs.zip -d $tmp_dir
        mv $tmp_dir/PJs.app /Applications/
        rm -rf $tmp_dir
    fi
}

apply_macos_system_defaults() {
    info "Applying MacOS system defaults..."

    # FWIW, this `defaults find` is good at finding some set preferences.
    # e.g.    defaults find com.apple.ActivityMonitor

    # Close any open System Settings panes, to prevent them from overriding
    # settings we’re about to change
    osascript -e 'tell application "System Settings" to quit' 2>/dev/null
    sleep 1

    ###############################################################################
    # General UI/UX                                                               #
    ###############################################################################

    # Menu bar: disable transparency
    # defaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool false

    # Set standby delay to 24 hours (default is 1 hour)
    # sudo pmset -a standbydelay 86400

    # Set startup sound effect to 60% volume
    sudo nvram SystemAudioVolume="%60"

    # Set highlight color to red
    defaults write NSGlobalDomain AppleHighlightColor -string "1.000000 0.733333 0.721569"

    # Set sidebar icon size to medium
    defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

    # Increase window resize speed for Cocoa applications
    defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

    # Disable the “Are you sure you want to open this application?” dialog
    defaults write com.apple.LaunchServices LSQuarantine -bool false

    # Remove duplicates in the “Open With” menu (also see `lscleanup` alias)
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user

    # Display ASCII control characters using caret notation in standard text views
    # Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
    defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

    # Disable Resume system-wide
    defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

    # Edit: ALLOW automatic termination of inactive apps
    defaults write NSGlobalDomain NSDisableAutomaticTermination -bool false

    # Disable the crash reporter
    defaults write com.apple.CrashReporter DialogType -string "none"

    # Reveal IP address, hostname, OS version, etc. when clicking the clock
    # in the login window
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    # Restart automatically if the computer freezes
    sudo systemsetup -setrestartfreeze on

    # go into computer sleep mode after 40min
    sudo systemsetup -setcomputersleep 40

    # Check for software updates daily, not just once per week
    defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    # Disable Notification Center and remove the menu bar icon
    # launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

    # Disable smart quotes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # Disable smart dashes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    ###############################################################################
    # SSD-specific tweaks                                                         #
    ###############################################################################

    # Disable hibernation (speeds up entering sleep mode)
    sudo pmset -a hibernatemode 0

    ###############################################################################
    # Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
    ###############################################################################

    # Trackpad: enable tap to click for this user and for the login screen
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    # Enable three finger drag
    defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true

    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # Enable full keyboard access for all controls
    # (e.g. enable Tab in modal dialogs)
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

    # Disable press-and-hold for keys in favor of key repeat
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

    # Set a blazingly fast keyboard repeat rate
    defaults write NSGlobalDomain KeyRepeat -int 1
    defaults write NSGlobalDomain InitialKeyRepeat -int 12

    # Automatically illuminate built-in MacBook keyboard in low light
    defaults write com.apple.BezelServices kDim -bool true
    # Turn off keyboard illumination when computer is not used for 5 minutes
    defaults write com.apple.BezelServices kDimTime -int 300

    # Disable auto-correct
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

    ###############################################################################
    # Screen                                                                      #
    ###############################################################################

    # Save screenshots to the desktop
    defaults write com.apple.screencapture location -string "${HOME}/Desktop" # For using screenshot relocator automation

    # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
    defaults write com.apple.screencapture type -string "png"

    # Disable shadow in screenshots
    defaults write com.apple.screencapture disable-shadow -bool false

    # Enable subpixel font rendering on non-Apple LCDs
    defaults write NSGlobalDomain AppleFontSmoothing -int 2

    # Enable HiDPI display modes (requires restart)
    sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

    ###############################################################################
    # Finder                                                                      #
    ###############################################################################

    # Hide external hard drives on desktop
    defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false

    # Hide hard drives on desktop
    defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false

    # Hide removable media hard drives on desktop
    defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false

    # Hide mounted servers on desktop
    defaults write com.apple.finder ShowMountedServersOnDesktop -bool false

    # Hide icons on desktop
    defaults write com.apple.finder CreateDesktop -bool false

    # Avoid creating .DS_Store files on network volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

    # Show path bar
    defaults write com.apple.finder ShowPathbar -bool true

    # Show hidden files inside the finder
    defaults write com.apple.finder "AppleShowAllFiles" -bool true

    # Show Status Bar
    defaults write com.apple.finder "ShowStatusBar" -bool true

    # Do not show warning when changing the file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false


    # Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
    defaults write com.apple.finder QuitMenuItem -bool true

    # Finder: disable window animations and Get Info animations
    defaults write com.apple.finder DisableAllAnimations -bool true

    # Finder: show hidden files by default
    defaults write com.apple.Finder AppleShowAllFiles -bool true

    # Finder: show all filename extensions
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    # Finder: show status bar
    defaults write com.apple.finder ShowStatusBar -bool true

    # Finder: show path bar
    defaults write com.apple.finder ShowPathbar -bool true

    # When performing a search, search the current folder by default
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    # Disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Enable spring loading for directories
    defaults write NSGlobalDomain com.apple.springing.enabled -bool true

    # Remove the spring loading delay for directories
    defaults write NSGlobalDomain com.apple.springing.delay -float 0

    # Avoid creating .DS_Store files on network volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

    # Automatically open a new Finder window when a volume is mounted
    defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
    defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
    defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

    # Show item info near icons on the desktop and in other icon views
    /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist

    # Show item info to the right of the icons on the desktop
    /usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist

    # Enable snap-to-grid for icons on the desktop and in other icon views
    /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

    # Increase grid spacing for icons on the desktop and in other icon views
    /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist

    # Increase the size of icons on the desktop and in other icon views
    /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
    /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

    # Disable the warning before emptying the Trash
    defaults write com.apple.finder WarnOnEmptyTrash -bool false

    # Empty Trash securely by default
    defaults write com.apple.finder EmptyTrashSecurely -bool true

    # Enable AirDrop over Ethernet and on unsupported Macs running Lion
    defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

    # Show the ~/Library folder
    chflags nohidden ~/Library

    # Show the /Volumes folder
    sudo chflags nohidden /Volumes

    # Remove Dropbox’s green checkmark icons in Finder
    file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
    [ -e "${file}" ] && mv -f "${file}" "${file}.bak"

    # Expand the following File Info panes:
    # “General”, “Open with”, and “Sharing & Permissions”
    defaults write com.apple.finder FXInfoPanesExpanded -dict \
    	General -bool true \
    	OpenWith -bool true \
    	Privileges -bool true

    ###############################################################################
    # Dock, Dashboard, and hot corners                                            #
    ###############################################################################

    # Enable highlight hover effect for the grid view of a stack (Dock)
    defaults write com.apple.dock mouse-over-hilite-stack -bool true

    # Set the icon size of Dock items to 48 pixels
    defaults write com.apple.dock tilesize -int 48
    defaults write com.apple.dock largesize -float 128

    # Change minimize/maximize window effect
    # defaults write com.apple.dock mineffect -string "suck"
    defaults write com.apple.dock mineffect -string "scale"

    # Minimize windows into their application’s icon
    defaults write com.apple.dock minimize-to-application -bool true

    # Enable spring loading for all Dock items
    defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

    # Show indicator lights for open applications in the Dock
    defaults write com.apple.dock show-process-indicators -bool true

    # Wipe all (default) app icons from the Dock
    # This is only really useful when setting up a new Mac, or if you don’t use
    # the Dock to launch apps.
    defaults write com.apple.dock persistent-apps -array

    # Show only open applications in the Dock
    defaults write com.apple.dock static-only -bool true

    # Don’t animate opening applications from the Dock
    defaults write com.apple.dock launchanim -bool false

    # Speed up Mission Control animations
    defaults write com.apple.dock expose-animation-duration -float 0.1

    # Don’t group windows by application in Mission Control
    # (i.e. use the old Exposé behavior instead)
    defaults write com.apple.dock expose-group-by-app -bool false

    # Disable Dashboard
    defaults write com.apple.dashboard mcx-disabled -bool true

    # Spaces span all displays
    defaults write com.apple.spaces "spans-displays" -bool false

    # Don’t automatically rearrange Spaces based on most recent use
    defaults write com.apple.dock mru-spaces -bool false


        # Set Dock autohide
    # Remove the auto-hiding Dock delay
    defaults write com.apple.dock autohide-delay -float 0
    # Remove the animation when hiding/showing the Dock
    defaults write com.apple.dock autohide-time-modifier -float 0

    # Automatically hide and show the Dock
    defaults write com.apple.dock autohide -bool true

    # Orient the dock on the left of the screen
    defaults write com.apple.dock orientation -string "left"

    # Make Dock icons of hidden applications translucent
    defaults write com.apple.dock showhidden -bool true

    # Disable the Launchpad gesture (pinch with thumb and three fingers)
    defaults write com.apple.dock showLaunchpadGestureEnabled -int 0

    # Add a spacer to the left side of the Dock (where the applications are)
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="small-spacer-tile";}'
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="small-spacer-tile";}'
    # Add a spacer to the right side of the Dock (where the Trash is)
    #defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'

    ###############################################################################
    # Safari & WebKit                                                             #
    ###############################################################################

    # Privacy: don’t send search queries to Apple
    sudo defaults write com.apple.Safari UniversalSearchEnabled -bool false
    sudo defaults write com.apple.Safari SuppressSearchSuggestions -bool true

    # Press Tab to highlight each item on a web page
    sudo defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
    sudo defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

    # Show the full URL in the address bar (note: this still hides the scheme)
    sudo defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true

    # Set Safari’s home page to `about:blank` for faster loading
    sudo defaults write com.apple.Safari HomePage -string "about:blank"

    # Prevent Safari from opening ‘safe’ files automatically after downloading
    sudo defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

    # Hide Safari’s bookmarks bar by default
    sudo defaults write com.apple.Safari ShowFavoritesBar -bool false

    # Hide Safari’s sidebar in Top Sites
    sudo defaults write com.apple.Safari ShowSidebarInTopSites -bool false

    # Disable Safari’s thumbnail cache for History and Top Sites
    # defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

    # Enable Safari’s debug menu
    sudo defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    # Make Safari’s search banners default to Contains instead of Starts With
    sudo defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

    # Remove useless icons from Safari’s bookmarks bar
    sudo defaults write com.apple.Safari ProxiesInBookmarksBar "()"

    # Enable the Develop menu and the Web Inspector in Safari
    sudo defaults write com.apple.Safari IncludeDevelopMenu -bool true
    sudo defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
    sudo defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

    # Add a context menu item for showing the Web Inspector in web views
    defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

    ###############################################################################
    # Spotlight                                                                   #
    ###############################################################################

    # Hide Spotlight tray-icon (and subsequent helper)
    #sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
    # Disable Spotlight indexing for any volume that gets mounted and has not yet
    # been indexed before.
    # Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
    # sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
    # Change indexing order and disable some search results
    defaults write com.apple.spotlight orderedItems -array \
    	'{"enabled" = 1;"name" = "APPLICATIONS";}' \
    	'{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
    	'{"enabled" = 1;"name" = "DIRECTORIES";}' \
    	'{"enabled" = 1;"name" = "PDF";}' \
    	'{"enabled" = 1;"name" = "FONTS";}' \
    	'{"enabled" = 0;"name" = "DOCUMENTS";}' \
    	'{"enabled" = 0;"name" = "MESSAGES";}' \
    	'{"enabled" = 0;"name" = "CONTACT";}' \
    	'{"enabled" = 0;"name" = "EVENT_TODO";}' \
    	'{"enabled" = 0;"name" = "IMAGES";}' \
    	'{"enabled" = 0;"name" = "BOOKMARKS";}' \
    	'{"enabled" = 0;"name" = "MUSIC";}' \
    	'{"enabled" = 0;"name" = "MOVIES";}' \
    	'{"enabled" = 0;"name" = "PRESENTATIONS";}' \
    	'{"enabled" = 0;"name" = "SPREADSHEETS";}' \
    	'{"enabled" = 0;"name" = "SOURCE";}' \
    	'{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
    	'{"enabled" = 0;"name" = "MENU_OTHER";}' \
    	'{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
    	'{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
    	'{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
    	'{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'
    # Load new settings before rebuilding the index
    killall mds > /dev/null 2>&1
    # Make sure indexing is enabled for the main volume
    sudo mdutil -i on / > /dev/null
    # Rebuild the index from scratch
    sudo mdutil -E / > /dev/null

    ###############################################################################
    # Time Machine                                                                #
    ###############################################################################

    # Prevent Time Machine from prompting to use new hard drives as backup volume
    defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

    # Disable local Time Machine backups
    # hash tmutil &> /dev/null && sudo tmutil disablelocal

    ###############################################################################
    # Activity Monitor                                                            #
    ###############################################################################

    # Show the main window when launching Activity Monitor
    defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

    # Visualize CPU usage in the Activity Monitor Dock icon
    defaults write com.apple.ActivityMonitor IconType -int 5

    # Show all processes in Activity Monitor
    defaults write com.apple.ActivityMonitor ShowCategory -int 0

    # Sets columns for all tabs
    # defaults read com.apple.ActivityMonitor "UserColumnsPerTab v5.0" -dict \
    #     '0' '( Command, CPUUsage, CPUTime, Threads, PID, UID, Ports )' \
    #     '1' '( Command, ResidentSize, Threads, Ports, PID, UID,  )' \
    #     '2' '( Command, PowerScore, 12HRPower, AppSleep, UID, powerAssertion )' \
    #     '3' '( Command, bytesWritten, bytesRead, Architecture, PID, UID, CPUUsage )' \
    #     '4' '( Command, txBytes, rxBytes, PID, UID, txPackets, rxPackets, CPUUsage )'

    # Set sort column
    # defaults write com.apple.ActivityMonitor UserColumnSortPerTab -dict \
    #     '0' '{ direction = 0; sort = CPUUsage; }' \
    #     '1' '{ direction = 0; sort = ResidentSize; }' \
    #     '2' '{ direction = 0; sort = 12HRPower; }' \
    #     '3' '{ direction = 0; sort = bytesWritten; }' \
    #     '4' '{ direction = 0; sort = rxBytes; }'
    defaults write com.apple.ActivityMonitor SortDirection -int 0

    # Show Data in the Disk graph (instead of IO)
    defaults write com.apple.ActivityMonitor DiskGraphType -int 1

    # Show Data in the Network graph (instead of packets)
    defaults write com.apple.ActivityMonitor NetworkGraphType -int 1

    ###############################################################################
    # Address Book, iCal, TextEdit, and Disk Utility                              #
    ###############################################################################

    # Enable the debug menu in Address Book
    defaults write com.apple.addressbook ABShowDebugMenu -bool true

    # Enable the debug menu in iCal (pre-10.8)
    defaults write com.apple.iCal IncludeDebugMenu -bool true

    # Use plain text mode for new TextEdit documents
    defaults write com.apple.TextEdit RichText -int 0
    # Open and save files as UTF-8 in TextEdit
    defaults write com.apple.TextEdit PlainTextEncoding -int 4
    defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

    # Enable the debug menu in Disk Utility
    defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true
    defaults write com.apple.DiskUtility advanced-image-options -bool true

    # Auto-play videos when opened with QuickTime Player
    defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true

    ###############################################################################
    # Mac App Store                                                               #
    ###############################################################################

    # Enable the WebKit Developer Tools in the Mac App Store
    defaults write com.apple.appstore WebKitDeveloperExtras -bool true

    # Enable Debug Menu in the Mac App Store
    defaults write com.apple.appstore ShowDebugMenu -bool true

    ###############################################################################
    # Photos                                                                      #
    ###############################################################################

    # Prevent Photos from opening automatically when devices are plugged in
    defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

    ###############################################################################
    # Messages                                                                    #
    ###############################################################################

    # Disable automatic emoji substitution (i.e. use plain text smileys)
    defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false

    # Disable smart quotes as it’s annoying for messages that contain code
    defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

    # Disable continuous spell checking
    defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false
}

install_homebrew_applications() {
    # NOTE: Should run at the end because calling `brew` will reset the sudo timestamp (https://github.com/Homebrew/brew/pull/17694/commits/2adf25dcaf8d8c66124c5b76b8a41ae228a7bb02)
    info 'Running brew bundle'
    brew bundle
    info 'Starting services'
    brew services start --all
    info 'Installing FZF'
    yes | $(brew --prefix)/opt/fzf/install
}

apply_application_defaults() {
    # Rectangle
    defaults write com.knollsoft.Rectangle curtainChangeSize -int 2
    defaults write com.knollsoft.Rectangle almostMaximizeHeight -float 1
    defaults write com.knollsoft.Rectangle almostMaximizeWidth -float 0.85

    # Rectangle custom window size with Shift + Alt + Ctrl + Cmd + N
    defaults write com.knollsoft.Rectangle specified -dict-add keyCode -float 45 modifierFlags -float 1966379
    defaults write com.knollsoft.Rectangle specifiedHeight -float 1055
    defaults write com.knollsoft.Rectangle specifiedWidth -float 1876

    # Rocket settings
    defaults write new.matthewpalmer.Rocket deactivated-apps -array Slack Xcode Terminal iTerm2 wezterm-gui
    defaults write net.matthewpalmer.Rocket launch-at-login -bool true
    defaults write net.matthewpalmer.Rocket use-fuzzy-search -bool true
    defaults write net.matthewpalmer.Rocket use-double-trigger -bool true
}

add_login_items() {
    info "Adding login items..."

    # Array of applications to add as login items
    login_apps=(
        "/Applications/Rectangle.app"
        "/Applications/Rocket.app"
        "/Applications/zoom.us.app"
        "/Applications/ChatGPT.app"
        "/Applications/1Password.app"
        "/Applications/AutoMute.app"
    )

    for app in "${login_apps[@]}"; do
        if [ -d "$app" ]; then
            # Check if app is already a login item
            if ! osascript -e "tell application \"System Events\" to get the name of every login item" | grep -q "$(basename "$app" .app)"; then
                osascript -e "tell application \"System Events\" to make login item at end with properties {path:\"$app\", hidden:false}"
                success "Added $(basename "$app") to login items"
            else
                warning "$(basename "$app") is already a login item"
            fi
        else
            error "Could not find $app"
        fi
    done
}

display_manual_tasks_remaining() {
    success """

    Tasks remaining:
    1) Grant full disk access to Alfred
    2) Install GPG Suite; set up GPG signing
    3) Grant various applications accessibility permissions (Rocket, Rectangle, ChatGPT, 1Password, Alfred, AutoMute, etc.)
    4) Enable Folder actions for Desktop w/ Screenshot Relocators

    """
}

info 'Bootstrapping machine'

# NOTE: Order is important
prompt_sudo
install_xcode
setup_ssh
clone_dotfiles
install_homebrew
setup_ruby_environment
install_applications
apply_macos_system_defaults
install_homebrew_applications
apply_application_defaults
add_login_items
display_manual_tasks_remaining

success 'Bootstrapping complete'
